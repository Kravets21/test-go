/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"time"
)

// checks if the EmailNotificationStateInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailNotificationStateInner{}

// EmailNotificationStateInner struct for EmailNotificationStateInner
type EmailNotificationStateInner struct {
	// The state of the Notification status.  - 1: Notification Accepted  - 2: Notification Blocked  - 3: Notification Sent  - 4: Notification Not Sent  - 5: Notification Delivered  - 6: Notification Not Delivered
	Status *int32 `json:"status,omitempty"`
	// The message of the Notification status. Contains the error message if the Notification was not sent or additional information about status state.
	Reason *string `json:"reason,omitempty"`
	// Json string Data about this notification state step.  Helps to debug or understanding problem or just information. Notice: fields can be differently depends status and errors.
	Data map[string]interface{} `json:"data,omitempty"`
	// The datetime when the Notification Status was updated.
	Time *time.Time `json:"time,omitempty"`
}

// NewEmailNotificationStateInner instantiates a new EmailNotificationStateInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailNotificationStateInner() *EmailNotificationStateInner {
	this := EmailNotificationStateInner{}
	return &this
}

// NewEmailNotificationStateInnerWithDefaults instantiates a new EmailNotificationStateInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailNotificationStateInnerWithDefaults() *EmailNotificationStateInner {
	this := EmailNotificationStateInner{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmailNotificationStateInner) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationStateInner) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmailNotificationStateInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *EmailNotificationStateInner) SetStatus(v int32) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *EmailNotificationStateInner) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationStateInner) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *EmailNotificationStateInner) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *EmailNotificationStateInner) SetReason(v string) {
	o.Reason = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EmailNotificationStateInner) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationStateInner) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EmailNotificationStateInner) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *EmailNotificationStateInner) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EmailNotificationStateInner) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationStateInner) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EmailNotificationStateInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *EmailNotificationStateInner) SetTime(v time.Time) {
	o.Time = &v
}

func (o EmailNotificationStateInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailNotificationStateInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableEmailNotificationStateInner struct {
	value *EmailNotificationStateInner
	isSet bool
}

func (v NullableEmailNotificationStateInner) Get() *EmailNotificationStateInner {
	return v.value
}

func (v *NullableEmailNotificationStateInner) Set(val *EmailNotificationStateInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailNotificationStateInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailNotificationStateInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailNotificationStateInner(val *EmailNotificationStateInner) *NullableEmailNotificationStateInner {
	return &NullableEmailNotificationStateInner{value: val, isSet: true}
}

func (v NullableEmailNotificationStateInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailNotificationStateInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


