/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
)

// checks if the SmsTemplateContentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsTemplateContentResponse{}

// SmsTemplateContentResponse struct for SmsTemplateContentResponse
type SmsTemplateContentResponse struct {
	Data *SmsTemplateContent `json:"data,omitempty"`
}

// NewSmsTemplateContentResponse instantiates a new SmsTemplateContentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsTemplateContentResponse() *SmsTemplateContentResponse {
	this := SmsTemplateContentResponse{}
	return &this
}

// NewSmsTemplateContentResponseWithDefaults instantiates a new SmsTemplateContentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsTemplateContentResponseWithDefaults() *SmsTemplateContentResponse {
	this := SmsTemplateContentResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SmsTemplateContentResponse) GetData() SmsTemplateContent {
	if o == nil || IsNil(o.Data) {
		var ret SmsTemplateContent
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTemplateContentResponse) GetDataOk() (*SmsTemplateContent, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SmsTemplateContentResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SmsTemplateContent and assigns it to the Data field.
func (o *SmsTemplateContentResponse) SetData(v SmsTemplateContent) {
	o.Data = &v
}

func (o SmsTemplateContentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsTemplateContentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableSmsTemplateContentResponse struct {
	value *SmsTemplateContentResponse
	isSet bool
}

func (v NullableSmsTemplateContentResponse) Get() *SmsTemplateContentResponse {
	return v.value
}

func (v *NullableSmsTemplateContentResponse) Set(val *SmsTemplateContentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTemplateContentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTemplateContentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTemplateContentResponse(val *SmsTemplateContentResponse) *NullableSmsTemplateContentResponse {
	return &NullableSmsTemplateContentResponse{value: val, isSet: true}
}

func (v NullableSmsTemplateContentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTemplateContentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


