/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// checks if the SmsTransportCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsTransportCreateRequest{}

// SmsTransportCreateRequest struct for SmsTransportCreateRequest
type SmsTransportCreateRequest struct {
	// The name of the Transport.
	Name string `json:"name"`
	// The type of the Transport.
	Type string `json:"type"`
	// The credentials of the Transport for type.
	Credentials map[string]interface{} `json:"credentials"`
}

type _SmsTransportCreateRequest SmsTransportCreateRequest

// NewSmsTransportCreateRequest instantiates a new SmsTransportCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsTransportCreateRequest(name string, type_ string, credentials map[string]interface{}) *SmsTransportCreateRequest {
	this := SmsTransportCreateRequest{}
	this.Name = name
	this.Type = type_
	this.Credentials = credentials
	return &this
}

// NewSmsTransportCreateRequestWithDefaults instantiates a new SmsTransportCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsTransportCreateRequestWithDefaults() *SmsTransportCreateRequest {
	this := SmsTransportCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SmsTransportCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmsTransportCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmsTransportCreateRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SmsTransportCreateRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SmsTransportCreateRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SmsTransportCreateRequest) SetType(v string) {
	o.Type = v
}

// GetCredentials returns the Credentials field value
func (o *SmsTransportCreateRequest) GetCredentials() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *SmsTransportCreateRequest) GetCredentialsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Credentials, true
}

// SetCredentials sets field value
func (o *SmsTransportCreateRequest) SetCredentials(v map[string]interface{}) {
	o.Credentials = v
}

func (o SmsTransportCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsTransportCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["credentials"] = o.Credentials
	return toSerialize, nil
}

func (o *SmsTransportCreateRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"credentials",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmsTransportCreateRequest := _SmsTransportCreateRequest{}

	err = json.Unmarshal(bytes, &varSmsTransportCreateRequest)

	if err != nil {
		return err
	}

	*o = SmsTransportCreateRequest(varSmsTransportCreateRequest)

	return err
}

type NullableSmsTransportCreateRequest struct {
	value *SmsTransportCreateRequest
	isSet bool
}

func (v NullableSmsTransportCreateRequest) Get() *SmsTransportCreateRequest {
	return v.value
}

func (v *NullableSmsTransportCreateRequest) Set(val *SmsTransportCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTransportCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTransportCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTransportCreateRequest(val *SmsTransportCreateRequest) *NullableSmsTransportCreateRequest {
	return &NullableSmsTransportCreateRequest{value: val, isSet: true}
}

func (v NullableSmsTransportCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTransportCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


