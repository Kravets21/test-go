/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"time"
)

// checks if the EmailSender type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSender{}

// EmailSender struct for EmailSender
type EmailSender struct {
	// The unique identifier of the Sender.
	Id *string `json:"id,omitempty"`
	// The name of the Sender.
	Name *string `json:"name,omitempty"`
	// The email address of the Sender.
	EmailAddress *string `json:"email_address,omitempty"`
	// Indicates to prevent the sender from applying custom values. Default value is false.
	RestrictCustomization *bool `json:"restrict_customization,omitempty"`
	// The datetime when the Sender was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewEmailSender instantiates a new EmailSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSender() *EmailSender {
	this := EmailSender{}
	return &this
}

// NewEmailSenderWithDefaults instantiates a new EmailSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSenderWithDefaults() *EmailSender {
	this := EmailSender{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailSender) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSender) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailSender) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmailSender) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EmailSender) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSender) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EmailSender) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EmailSender) SetName(v string) {
	o.Name = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *EmailSender) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSender) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailSender) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *EmailSender) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetRestrictCustomization returns the RestrictCustomization field value if set, zero value otherwise.
func (o *EmailSender) GetRestrictCustomization() bool {
	if o == nil || IsNil(o.RestrictCustomization) {
		var ret bool
		return ret
	}
	return *o.RestrictCustomization
}

// GetRestrictCustomizationOk returns a tuple with the RestrictCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSender) GetRestrictCustomizationOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictCustomization) {
		return nil, false
	}
	return o.RestrictCustomization, true
}

// HasRestrictCustomization returns a boolean if a field has been set.
func (o *EmailSender) HasRestrictCustomization() bool {
	if o != nil && !IsNil(o.RestrictCustomization) {
		return true
	}

	return false
}

// SetRestrictCustomization gets a reference to the given bool and assigns it to the RestrictCustomization field.
func (o *EmailSender) SetRestrictCustomization(v bool) {
	o.RestrictCustomization = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EmailSender) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSender) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EmailSender) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EmailSender) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o EmailSender) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSender) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.RestrictCustomization) {
		toSerialize["restrict_customization"] = o.RestrictCustomization
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableEmailSender struct {
	value *EmailSender
	isSet bool
}

func (v NullableEmailSender) Get() *EmailSender {
	return v.value
}

func (v *NullableEmailSender) Set(val *EmailSender) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSender) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSender(val *EmailSender) *NullableEmailSender {
	return &NullableEmailSender{value: val, isSet: true}
}

func (v NullableEmailSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


