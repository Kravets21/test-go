/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
)

// checks if the SmsChannelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsChannelRequest{}

// SmsChannelRequest struct for SmsChannelRequest
type SmsChannelRequest struct {
	// The name of the Template.
	Name *string `json:"name,omitempty"`
}

// NewSmsChannelRequest instantiates a new SmsChannelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsChannelRequest() *SmsChannelRequest {
	this := SmsChannelRequest{}
	return &this
}

// NewSmsChannelRequestWithDefaults instantiates a new SmsChannelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsChannelRequestWithDefaults() *SmsChannelRequest {
	this := SmsChannelRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmsChannelRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsChannelRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmsChannelRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmsChannelRequest) SetName(v string) {
	o.Name = &v
}

func (o SmsChannelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsChannelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSmsChannelRequest struct {
	value *SmsChannelRequest
	isSet bool
}

func (v NullableSmsChannelRequest) Get() *SmsChannelRequest {
	return v.value
}

func (v *NullableSmsChannelRequest) Set(val *SmsChannelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsChannelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsChannelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsChannelRequest(val *SmsChannelRequest) *NullableSmsChannelRequest {
	return &NullableSmsChannelRequest{value: val, isSet: true}
}

func (v NullableSmsChannelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsChannelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


