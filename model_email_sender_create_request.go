/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// checks if the EmailSenderCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSenderCreateRequest{}

// EmailSenderCreateRequest struct for EmailSenderCreateRequest
type EmailSenderCreateRequest struct {
	// The name of the Sender.
	Name string `json:"name"`
	// The email address of the Sender.
	EmailAddress string `json:"email_address"`
	// Indicates to prevent the sender from applying custom values. Default value is false.
	RestrictCustomization *bool `json:"restrict_customization,omitempty"`
}

type _EmailSenderCreateRequest EmailSenderCreateRequest

// NewEmailSenderCreateRequest instantiates a new EmailSenderCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSenderCreateRequest(name string, emailAddress string) *EmailSenderCreateRequest {
	this := EmailSenderCreateRequest{}
	this.Name = name
	this.EmailAddress = emailAddress
	return &this
}

// NewEmailSenderCreateRequestWithDefaults instantiates a new EmailSenderCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSenderCreateRequestWithDefaults() *EmailSenderCreateRequest {
	this := EmailSenderCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *EmailSenderCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailSenderCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailSenderCreateRequest) SetName(v string) {
	o.Name = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *EmailSenderCreateRequest) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *EmailSenderCreateRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *EmailSenderCreateRequest) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetRestrictCustomization returns the RestrictCustomization field value if set, zero value otherwise.
func (o *EmailSenderCreateRequest) GetRestrictCustomization() bool {
	if o == nil || IsNil(o.RestrictCustomization) {
		var ret bool
		return ret
	}
	return *o.RestrictCustomization
}

// GetRestrictCustomizationOk returns a tuple with the RestrictCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSenderCreateRequest) GetRestrictCustomizationOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictCustomization) {
		return nil, false
	}
	return o.RestrictCustomization, true
}

// HasRestrictCustomization returns a boolean if a field has been set.
func (o *EmailSenderCreateRequest) HasRestrictCustomization() bool {
	if o != nil && !IsNil(o.RestrictCustomization) {
		return true
	}

	return false
}

// SetRestrictCustomization gets a reference to the given bool and assigns it to the RestrictCustomization field.
func (o *EmailSenderCreateRequest) SetRestrictCustomization(v bool) {
	o.RestrictCustomization = &v
}

func (o EmailSenderCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSenderCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email_address"] = o.EmailAddress
	if !IsNil(o.RestrictCustomization) {
		toSerialize["restrict_customization"] = o.RestrictCustomization
	}
	return toSerialize, nil
}

func (o *EmailSenderCreateRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailSenderCreateRequest := _EmailSenderCreateRequest{}

	err = json.Unmarshal(bytes, &varEmailSenderCreateRequest)

	if err != nil {
		return err
	}

	*o = EmailSenderCreateRequest(varEmailSenderCreateRequest)

	return err
}

type NullableEmailSenderCreateRequest struct {
	value *EmailSenderCreateRequest
	isSet bool
}

func (v NullableEmailSenderCreateRequest) Get() *EmailSenderCreateRequest {
	return v.value
}

func (v *NullableEmailSenderCreateRequest) Set(val *EmailSenderCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSenderCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSenderCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSenderCreateRequest(val *EmailSenderCreateRequest) *NullableEmailSenderCreateRequest {
	return &NullableEmailSenderCreateRequest{value: val, isSet: true}
}

func (v NullableEmailSenderCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSenderCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


