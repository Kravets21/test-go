/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
)

// checks if the EmailSenderUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSenderUpdateRequest{}

// EmailSenderUpdateRequest struct for EmailSenderUpdateRequest
type EmailSenderUpdateRequest struct {
	// The name of the Sender.
	Name NullableString `json:"name,omitempty"`
	// The email address of the Sender.
	EmailAddress NullableString `json:"email_address,omitempty"`
	// Indicates to prevent the sender from applying custom values. Default value is false.
	RestrictCustomization *bool `json:"restrict_customization,omitempty"`
}

// NewEmailSenderUpdateRequest instantiates a new EmailSenderUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSenderUpdateRequest() *EmailSenderUpdateRequest {
	this := EmailSenderUpdateRequest{}
	return &this
}

// NewEmailSenderUpdateRequestWithDefaults instantiates a new EmailSenderUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSenderUpdateRequestWithDefaults() *EmailSenderUpdateRequest {
	this := EmailSenderUpdateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSenderUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSenderUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EmailSenderUpdateRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EmailSenderUpdateRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EmailSenderUpdateRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EmailSenderUpdateRequest) UnsetName() {
	o.Name.Unset()
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSenderUpdateRequest) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress.Get()) {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSenderUpdateRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailSenderUpdateRequest) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *EmailSenderUpdateRequest) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *EmailSenderUpdateRequest) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *EmailSenderUpdateRequest) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetRestrictCustomization returns the RestrictCustomization field value if set, zero value otherwise.
func (o *EmailSenderUpdateRequest) GetRestrictCustomization() bool {
	if o == nil || IsNil(o.RestrictCustomization) {
		var ret bool
		return ret
	}
	return *o.RestrictCustomization
}

// GetRestrictCustomizationOk returns a tuple with the RestrictCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSenderUpdateRequest) GetRestrictCustomizationOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictCustomization) {
		return nil, false
	}
	return o.RestrictCustomization, true
}

// HasRestrictCustomization returns a boolean if a field has been set.
func (o *EmailSenderUpdateRequest) HasRestrictCustomization() bool {
	if o != nil && !IsNil(o.RestrictCustomization) {
		return true
	}

	return false
}

// SetRestrictCustomization gets a reference to the given bool and assigns it to the RestrictCustomization field.
func (o *EmailSenderUpdateRequest) SetRestrictCustomization(v bool) {
	o.RestrictCustomization = &v
}

func (o EmailSenderUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSenderUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.EmailAddress.IsSet() {
		toSerialize["email_address"] = o.EmailAddress.Get()
	}
	if !IsNil(o.RestrictCustomization) {
		toSerialize["restrict_customization"] = o.RestrictCustomization
	}
	return toSerialize, nil
}

type NullableEmailSenderUpdateRequest struct {
	value *EmailSenderUpdateRequest
	isSet bool
}

func (v NullableEmailSenderUpdateRequest) Get() *EmailSenderUpdateRequest {
	return v.value
}

func (v *NullableEmailSenderUpdateRequest) Set(val *EmailSenderUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSenderUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSenderUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSenderUpdateRequest(val *EmailSenderUpdateRequest) *NullableEmailSenderUpdateRequest {
	return &NullableEmailSenderUpdateRequest{value: val, isSet: true}
}

func (v NullableEmailSenderUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSenderUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


