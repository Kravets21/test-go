/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// checks if the EmailRoutingRuleCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRoutingRuleCreateRequest{}

// EmailRoutingRuleCreateRequest struct for EmailRoutingRuleCreateRequest
type EmailRoutingRuleCreateRequest struct {
	// The ID of the Transport
	TransportId string `json:"transport_id"`
	// The ID of the Sender
	SenderId string `json:"sender_id"`
	// Whether the Routing-rule is reserved or not
	IsReserved *bool `json:"is_reserved,omitempty"`
}

type _EmailRoutingRuleCreateRequest EmailRoutingRuleCreateRequest

// NewEmailRoutingRuleCreateRequest instantiates a new EmailRoutingRuleCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRoutingRuleCreateRequest(transportId string, senderId string) *EmailRoutingRuleCreateRequest {
	this := EmailRoutingRuleCreateRequest{}
	this.TransportId = transportId
	this.SenderId = senderId
	return &this
}

// NewEmailRoutingRuleCreateRequestWithDefaults instantiates a new EmailRoutingRuleCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRoutingRuleCreateRequestWithDefaults() *EmailRoutingRuleCreateRequest {
	this := EmailRoutingRuleCreateRequest{}
	return &this
}

// GetTransportId returns the TransportId field value
func (o *EmailRoutingRuleCreateRequest) GetTransportId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportId
}

// GetTransportIdOk returns a tuple with the TransportId field value
// and a boolean to check if the value has been set.
func (o *EmailRoutingRuleCreateRequest) GetTransportIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportId, true
}

// SetTransportId sets field value
func (o *EmailRoutingRuleCreateRequest) SetTransportId(v string) {
	o.TransportId = v
}

// GetSenderId returns the SenderId field value
func (o *EmailRoutingRuleCreateRequest) GetSenderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value
// and a boolean to check if the value has been set.
func (o *EmailRoutingRuleCreateRequest) GetSenderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderId, true
}

// SetSenderId sets field value
func (o *EmailRoutingRuleCreateRequest) SetSenderId(v string) {
	o.SenderId = v
}

// GetIsReserved returns the IsReserved field value if set, zero value otherwise.
func (o *EmailRoutingRuleCreateRequest) GetIsReserved() bool {
	if o == nil || IsNil(o.IsReserved) {
		var ret bool
		return ret
	}
	return *o.IsReserved
}

// GetIsReservedOk returns a tuple with the IsReserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRoutingRuleCreateRequest) GetIsReservedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReserved) {
		return nil, false
	}
	return o.IsReserved, true
}

// HasIsReserved returns a boolean if a field has been set.
func (o *EmailRoutingRuleCreateRequest) HasIsReserved() bool {
	if o != nil && !IsNil(o.IsReserved) {
		return true
	}

	return false
}

// SetIsReserved gets a reference to the given bool and assigns it to the IsReserved field.
func (o *EmailRoutingRuleCreateRequest) SetIsReserved(v bool) {
	o.IsReserved = &v
}

func (o EmailRoutingRuleCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRoutingRuleCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transport_id"] = o.TransportId
	toSerialize["sender_id"] = o.SenderId
	if !IsNil(o.IsReserved) {
		toSerialize["is_reserved"] = o.IsReserved
	}
	return toSerialize, nil
}

func (o *EmailRoutingRuleCreateRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transport_id",
		"sender_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailRoutingRuleCreateRequest := _EmailRoutingRuleCreateRequest{}

	err = json.Unmarshal(bytes, &varEmailRoutingRuleCreateRequest)

	if err != nil {
		return err
	}

	*o = EmailRoutingRuleCreateRequest(varEmailRoutingRuleCreateRequest)

	return err
}

type NullableEmailRoutingRuleCreateRequest struct {
	value *EmailRoutingRuleCreateRequest
	isSet bool
}

func (v NullableEmailRoutingRuleCreateRequest) Get() *EmailRoutingRuleCreateRequest {
	return v.value
}

func (v *NullableEmailRoutingRuleCreateRequest) Set(val *EmailRoutingRuleCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRoutingRuleCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRoutingRuleCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRoutingRuleCreateRequest(val *EmailRoutingRuleCreateRequest) *NullableEmailRoutingRuleCreateRequest {
	return &NullableEmailRoutingRuleCreateRequest{value: val, isSet: true}
}

func (v NullableEmailRoutingRuleCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRoutingRuleCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


