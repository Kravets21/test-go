/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"time"
)

// checks if the SmsTemplateContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsTemplateContent{}

// SmsTemplateContent struct for SmsTemplateContent
type SmsTemplateContent struct {
	Locale *LocaleCode `json:"locale,omitempty"`
	// This is the body for SMS Notification.
	Body *string `json:"body,omitempty"`
	VariablesSettings []EmailTemplateContentVariablesSettingsInner `json:"variables_settings,omitempty"`
	// The datetime when the Template Content was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSmsTemplateContent instantiates a new SmsTemplateContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsTemplateContent() *SmsTemplateContent {
	this := SmsTemplateContent{}
	return &this
}

// NewSmsTemplateContentWithDefaults instantiates a new SmsTemplateContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsTemplateContentWithDefaults() *SmsTemplateContent {
	this := SmsTemplateContent{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *SmsTemplateContent) GetLocale() LocaleCode {
	if o == nil || IsNil(o.Locale) {
		var ret LocaleCode
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTemplateContent) GetLocaleOk() (*LocaleCode, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *SmsTemplateContent) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given LocaleCode and assigns it to the Locale field.
func (o *SmsTemplateContent) SetLocale(v LocaleCode) {
	o.Locale = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *SmsTemplateContent) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTemplateContent) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *SmsTemplateContent) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *SmsTemplateContent) SetBody(v string) {
	o.Body = &v
}

// GetVariablesSettings returns the VariablesSettings field value if set, zero value otherwise.
func (o *SmsTemplateContent) GetVariablesSettings() []EmailTemplateContentVariablesSettingsInner {
	if o == nil || IsNil(o.VariablesSettings) {
		var ret []EmailTemplateContentVariablesSettingsInner
		return ret
	}
	return o.VariablesSettings
}

// GetVariablesSettingsOk returns a tuple with the VariablesSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTemplateContent) GetVariablesSettingsOk() ([]EmailTemplateContentVariablesSettingsInner, bool) {
	if o == nil || IsNil(o.VariablesSettings) {
		return nil, false
	}
	return o.VariablesSettings, true
}

// HasVariablesSettings returns a boolean if a field has been set.
func (o *SmsTemplateContent) HasVariablesSettings() bool {
	if o != nil && !IsNil(o.VariablesSettings) {
		return true
	}

	return false
}

// SetVariablesSettings gets a reference to the given []EmailTemplateContentVariablesSettingsInner and assigns it to the VariablesSettings field.
func (o *SmsTemplateContent) SetVariablesSettings(v []EmailTemplateContentVariablesSettingsInner) {
	o.VariablesSettings = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SmsTemplateContent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTemplateContent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SmsTemplateContent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SmsTemplateContent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SmsTemplateContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsTemplateContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.VariablesSettings) {
		toSerialize["variables_settings"] = o.VariablesSettings
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSmsTemplateContent struct {
	value *SmsTemplateContent
	isSet bool
}

func (v NullableSmsTemplateContent) Get() *SmsTemplateContent {
	return v.value
}

func (v *NullableSmsTemplateContent) Set(val *SmsTemplateContent) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTemplateContent) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTemplateContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTemplateContent(val *SmsTemplateContent) *NullableSmsTemplateContent {
	return &NullableSmsTemplateContent{value: val, isSet: true}
}

func (v NullableSmsTemplateContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTemplateContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


