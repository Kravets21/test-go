/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// checks if the EmailSendBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSendBatchRequest{}

// EmailSendBatchRequest struct for EmailSendBatchRequest
type EmailSendBatchRequest struct {
	// Array of notifications which need to send
	Notifications []EmailSendRequest `json:"notifications"`
}

type _EmailSendBatchRequest EmailSendBatchRequest

// NewEmailSendBatchRequest instantiates a new EmailSendBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSendBatchRequest(notifications []EmailSendRequest) *EmailSendBatchRequest {
	this := EmailSendBatchRequest{}
	this.Notifications = notifications
	return &this
}

// NewEmailSendBatchRequestWithDefaults instantiates a new EmailSendBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendBatchRequestWithDefaults() *EmailSendBatchRequest {
	this := EmailSendBatchRequest{}
	return &this
}

// GetNotifications returns the Notifications field value
func (o *EmailSendBatchRequest) GetNotifications() []EmailSendRequest {
	if o == nil {
		var ret []EmailSendRequest
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *EmailSendBatchRequest) GetNotificationsOk() ([]EmailSendRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *EmailSendBatchRequest) SetNotifications(v []EmailSendRequest) {
	o.Notifications = v
}

func (o EmailSendBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSendBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notifications"] = o.Notifications
	return toSerialize, nil
}

func (o *EmailSendBatchRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifications",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailSendBatchRequest := _EmailSendBatchRequest{}

	err = json.Unmarshal(bytes, &varEmailSendBatchRequest)

	if err != nil {
		return err
	}

	*o = EmailSendBatchRequest(varEmailSendBatchRequest)

	return err
}

type NullableEmailSendBatchRequest struct {
	value *EmailSendBatchRequest
	isSet bool
}

func (v NullableEmailSendBatchRequest) Get() *EmailSendBatchRequest {
	return v.value
}

func (v *NullableEmailSendBatchRequest) Set(val *EmailSendBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendBatchRequest(val *EmailSendBatchRequest) *NullableEmailSendBatchRequest {
	return &NullableEmailSendBatchRequest{value: val, isSet: true}
}

func (v NullableEmailSendBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


