/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
)

// checks if the AudienceRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceRule{}

// AudienceRule struct for AudienceRule
type AudienceRule struct {
	Property *AudienceRuleProperty `json:"property,omitempty"`
	// The operator of the filter.
	Operator *string `json:"operator,omitempty"`
	// The value of the filter.
	Value *string `json:"value,omitempty"`
}

// NewAudienceRule instantiates a new AudienceRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceRule() *AudienceRule {
	this := AudienceRule{}
	return &this
}

// NewAudienceRuleWithDefaults instantiates a new AudienceRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceRuleWithDefaults() *AudienceRule {
	this := AudienceRule{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *AudienceRule) GetProperty() AudienceRuleProperty {
	if o == nil || IsNil(o.Property) {
		var ret AudienceRuleProperty
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetPropertyOk() (*AudienceRuleProperty, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *AudienceRule) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given AudienceRuleProperty and assigns it to the Property field.
func (o *AudienceRule) SetProperty(v AudienceRuleProperty) {
	o.Property = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *AudienceRule) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *AudienceRule) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *AudienceRule) SetOperator(v string) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AudienceRule) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AudienceRule) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AudienceRule) SetValue(v string) {
	o.Value = &v
}

func (o AudienceRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableAudienceRule struct {
	value *AudienceRule
	isSet bool
}

func (v NullableAudienceRule) Get() *AudienceRule {
	return v.value
}

func (v *NullableAudienceRule) Set(val *AudienceRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceRule(val *AudienceRule) *NullableAudienceRule {
	return &NullableAudienceRule{value: val, isSet: true}
}

func (v NullableAudienceRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


