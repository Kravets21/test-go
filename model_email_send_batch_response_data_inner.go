/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// EmailSendBatchResponseDataInner - struct for EmailSendBatchResponseDataInner
type EmailSendBatchResponseDataInner struct {
	EmailSendResponseData *EmailSendResponseData
	ErrorMultiple *ErrorMultiple
}

// EmailSendResponseDataAsEmailSendBatchResponseDataInner is a convenience function that returns EmailSendResponseData wrapped in EmailSendBatchResponseDataInner
func EmailSendResponseDataAsEmailSendBatchResponseDataInner(v *EmailSendResponseData) EmailSendBatchResponseDataInner {
	return EmailSendBatchResponseDataInner{
		EmailSendResponseData: v,
	}
}

// ErrorMultipleAsEmailSendBatchResponseDataInner is a convenience function that returns ErrorMultiple wrapped in EmailSendBatchResponseDataInner
func ErrorMultipleAsEmailSendBatchResponseDataInner(v *ErrorMultiple) EmailSendBatchResponseDataInner {
	return EmailSendBatchResponseDataInner{
		ErrorMultiple: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmailSendBatchResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmailSendResponseData
	err = newStrictDecoder(data).Decode(&dst.EmailSendResponseData)
	if err == nil {
		jsonEmailSendResponseData, _ := json.Marshal(dst.EmailSendResponseData)
		if string(jsonEmailSendResponseData) == "{}" { // empty struct
			dst.EmailSendResponseData = nil
		} else {
			match++
		}
	} else {
		dst.EmailSendResponseData = nil
	}

	// try to unmarshal data into ErrorMultiple
	err = newStrictDecoder(data).Decode(&dst.ErrorMultiple)
	if err == nil {
		jsonErrorMultiple, _ := json.Marshal(dst.ErrorMultiple)
		if string(jsonErrorMultiple) == "{}" { // empty struct
			dst.ErrorMultiple = nil
		} else {
			match++
		}
	} else {
		dst.ErrorMultiple = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmailSendResponseData = nil
		dst.ErrorMultiple = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EmailSendBatchResponseDataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EmailSendBatchResponseDataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmailSendBatchResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.EmailSendResponseData != nil {
		return json.Marshal(&src.EmailSendResponseData)
	}

	if src.ErrorMultiple != nil {
		return json.Marshal(&src.ErrorMultiple)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmailSendBatchResponseDataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EmailSendResponseData != nil {
		return obj.EmailSendResponseData
	}

	if obj.ErrorMultiple != nil {
		return obj.ErrorMultiple
	}

	// all schemas are nil
	return nil
}

type NullableEmailSendBatchResponseDataInner struct {
	value *EmailSendBatchResponseDataInner
	isSet bool
}

func (v NullableEmailSendBatchResponseDataInner) Get() *EmailSendBatchResponseDataInner {
	return v.value
}

func (v *NullableEmailSendBatchResponseDataInner) Set(val *EmailSendBatchResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendBatchResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendBatchResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendBatchResponseDataInner(val *EmailSendBatchResponseDataInner) *NullableEmailSendBatchResponseDataInner {
	return &NullableEmailSendBatchResponseDataInner{value: val, isSet: true}
}

func (v NullableEmailSendBatchResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendBatchResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


