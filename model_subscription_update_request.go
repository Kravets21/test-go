/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionUpdateRequest{}

// SubscriptionUpdateRequest struct for SubscriptionUpdateRequest
type SubscriptionUpdateRequest struct {
	// A short explanation, what about this webhook subscription
	Description string `json:"description"`
	// List of events which webhook subscription subscribed
	Events []string `json:"events"`
	Metadata map[string]interface{} `json:"metadata"`
	// The status of the webhook subscription. Every digit matters:   1 - active,   2 - inactive.
	Status int32 `json:"status"`
	// The url address to where need make post request
	Url string `json:"url"`
}

type _SubscriptionUpdateRequest SubscriptionUpdateRequest

// NewSubscriptionUpdateRequest instantiates a new SubscriptionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionUpdateRequest(description string, events []string, metadata map[string]interface{}, status int32, url string) *SubscriptionUpdateRequest {
	this := SubscriptionUpdateRequest{}
	this.Description = description
	this.Events = events
	this.Metadata = metadata
	this.Status = status
	this.Url = url
	return &this
}

// NewSubscriptionUpdateRequestWithDefaults instantiates a new SubscriptionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionUpdateRequestWithDefaults() *SubscriptionUpdateRequest {
	this := SubscriptionUpdateRequest{}
	return &this
}

// GetDescription returns the Description field value
func (o *SubscriptionUpdateRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SubscriptionUpdateRequest) SetDescription(v string) {
	o.Description = v
}

// GetEvents returns the Events field value
func (o *SubscriptionUpdateRequest) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateRequest) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *SubscriptionUpdateRequest) SetEvents(v []string) {
	o.Events = v
}

// GetMetadata returns the Metadata field value
func (o *SubscriptionUpdateRequest) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *SubscriptionUpdateRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetStatus returns the Status field value
func (o *SubscriptionUpdateRequest) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateRequest) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubscriptionUpdateRequest) SetStatus(v int32) {
	o.Status = v
}

// GetUrl returns the Url field value
func (o *SubscriptionUpdateRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SubscriptionUpdateRequest) SetUrl(v string) {
	o.Url = v
}

func (o SubscriptionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["events"] = o.Events
	toSerialize["metadata"] = o.Metadata
	toSerialize["status"] = o.Status
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *SubscriptionUpdateRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"events",
		"metadata",
		"status",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionUpdateRequest := _SubscriptionUpdateRequest{}

	err = json.Unmarshal(bytes, &varSubscriptionUpdateRequest)

	if err != nil {
		return err
	}

	*o = SubscriptionUpdateRequest(varSubscriptionUpdateRequest)

	return err
}

type NullableSubscriptionUpdateRequest struct {
	value *SubscriptionUpdateRequest
	isSet bool
}

func (v NullableSubscriptionUpdateRequest) Get() *SubscriptionUpdateRequest {
	return v.value
}

func (v *NullableSubscriptionUpdateRequest) Set(val *SubscriptionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionUpdateRequest(val *SubscriptionUpdateRequest) *NullableSubscriptionUpdateRequest {
	return &NullableSubscriptionUpdateRequest{value: val, isSet: true}
}

func (v NullableSubscriptionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


