/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"fmt"
)

// LocaleCode The language code of the locale. The language code is a two-letter code defined in ISO 639-1. The language code is followed by an underscore and a two-letter country code defined in ISO 3166-1 alpha-2. For example, en_US represents the English language used in the United States.
type LocaleCode string

// List of LocaleCode
const (
	EN LocaleCode = "en"
	AR LocaleCode = "ar"
	AZ LocaleCode = "az"
	BS LocaleCode = "bs"
	CA LocaleCode = "ca"
	HR LocaleCode = "hr"
	CS LocaleCode = "cs"
	DA LocaleCode = "da"
	NL LocaleCode = "nl"
	ET LocaleCode = "et"
	FI LocaleCode = "fi"
	FR LocaleCode = "fr"
	KA LocaleCode = "ka"
	BG LocaleCode = "bg"
	DE LocaleCode = "de"
	EL LocaleCode = "el"
	HI LocaleCode = "hi"
	HE LocaleCode = "he"
	HU LocaleCode = "hu"
	ID LocaleCode = "id"
	IT LocaleCode = "it"
	JA LocaleCode = "ja"
	KO LocaleCode = "ko"
	LV LocaleCode = "lv"
	LT LocaleCode = "lt"
	MS LocaleCode = "ms"
	NB LocaleCode = "nb"
	FA LocaleCode = "fa"
	PL LocaleCode = "pl"
	PT LocaleCode = "pt"
	PA LocaleCode = "pa"
	RO LocaleCode = "ro"
	RU LocaleCode = "ru"
	SR LocaleCode = "sr"
	SK LocaleCode = "sk"
	ES LocaleCode = "es"
	SV LocaleCode = "sv"
	TH LocaleCode = "th"
	TR LocaleCode = "tr"
	UK LocaleCode = "uk"
	VI LocaleCode = "vi"
)

// All allowed values of LocaleCode enum
var AllowedLocaleCodeEnumValues = []LocaleCode{
	"en",
	"ar",
	"az",
	"bs",
	"ca",
	"hr",
	"cs",
	"da",
	"nl",
	"et",
	"fi",
	"fr",
	"ka",
	"bg",
	"de",
	"el",
	"hi",
	"he",
	"hu",
	"id",
	"it",
	"ja",
	"ko",
	"lv",
	"lt",
	"ms",
	"nb",
	"fa",
	"pl",
	"pt",
	"pa",
	"ro",
	"ru",
	"sr",
	"sk",
	"es",
	"sv",
	"th",
	"tr",
	"uk",
	"vi",
}

func (v *LocaleCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocaleCode(value)
	for _, existing := range AllowedLocaleCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocaleCode", value)
}

// NewLocaleCodeFromValue returns a pointer to a valid LocaleCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocaleCodeFromValue(v string) (*LocaleCode, error) {
	ev := LocaleCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocaleCode: valid values are %v", v, AllowedLocaleCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocaleCode) IsValid() bool {
	for _, existing := range AllowedLocaleCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocaleCode value
func (v LocaleCode) Ptr() *LocaleCode {
	return &v
}

type NullableLocaleCode struct {
	value *LocaleCode
	isSet bool
}

func (v NullableLocaleCode) Get() *LocaleCode {
	return v.value
}

func (v *NullableLocaleCode) Set(val *LocaleCode) {
	v.value = val
	v.isSet = true
}

func (v NullableLocaleCode) IsSet() bool {
	return v.isSet
}

func (v *NullableLocaleCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocaleCode(val *LocaleCode) *NullableLocaleCode {
	return &NullableLocaleCode{value: val, isSet: true}
}

func (v NullableLocaleCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocaleCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

