/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
)

// checks if the SmsChannelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsChannelResponse{}

// SmsChannelResponse struct for SmsChannelResponse
type SmsChannelResponse struct {
	Data *SmsChannel `json:"data,omitempty"`
}

// NewSmsChannelResponse instantiates a new SmsChannelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsChannelResponse() *SmsChannelResponse {
	this := SmsChannelResponse{}
	return &this
}

// NewSmsChannelResponseWithDefaults instantiates a new SmsChannelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsChannelResponseWithDefaults() *SmsChannelResponse {
	this := SmsChannelResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SmsChannelResponse) GetData() SmsChannel {
	if o == nil || IsNil(o.Data) {
		var ret SmsChannel
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsChannelResponse) GetDataOk() (*SmsChannel, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SmsChannelResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SmsChannel and assigns it to the Data field.
func (o *SmsChannelResponse) SetData(v SmsChannel) {
	o.Data = &v
}

func (o SmsChannelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsChannelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableSmsChannelResponse struct {
	value *SmsChannelResponse
	isSet bool
}

func (v NullableSmsChannelResponse) Get() *SmsChannelResponse {
	return v.value
}

func (v *NullableSmsChannelResponse) Set(val *SmsChannelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsChannelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsChannelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsChannelResponse(val *SmsChannelResponse) *NullableSmsChannelResponse {
	return &NullableSmsChannelResponse{value: val, isSet: true}
}

func (v NullableSmsChannelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsChannelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


