/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"time"
)

// checks if the EmailNotificationClick type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailNotificationClick{}

// EmailNotificationClick struct for EmailNotificationClick
type EmailNotificationClick struct {
	// The unique identifier of the Click.
	Id *string `json:"id,omitempty"`
	// The IP address from which the Click was made.
	Ip *string `json:"ip,omitempty"`
	// The user agent from which the Click was made.
	UserAgent *string `json:"user_agent,omitempty"`
	// The URL that was clicked.
	Url *string `json:"url,omitempty"`
	// The datetime when the Click was made.
	Time *time.Time `json:"time,omitempty"`
}

// NewEmailNotificationClick instantiates a new EmailNotificationClick object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailNotificationClick() *EmailNotificationClick {
	this := EmailNotificationClick{}
	return &this
}

// NewEmailNotificationClickWithDefaults instantiates a new EmailNotificationClick object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailNotificationClickWithDefaults() *EmailNotificationClick {
	this := EmailNotificationClick{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailNotificationClick) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationClick) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailNotificationClick) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmailNotificationClick) SetId(v string) {
	o.Id = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *EmailNotificationClick) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationClick) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *EmailNotificationClick) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *EmailNotificationClick) SetIp(v string) {
	o.Ip = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *EmailNotificationClick) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationClick) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *EmailNotificationClick) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *EmailNotificationClick) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EmailNotificationClick) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationClick) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EmailNotificationClick) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EmailNotificationClick) SetUrl(v string) {
	o.Url = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EmailNotificationClick) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotificationClick) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EmailNotificationClick) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *EmailNotificationClick) SetTime(v time.Time) {
	o.Time = &v
}

func (o EmailNotificationClick) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailNotificationClick) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableEmailNotificationClick struct {
	value *EmailNotificationClick
	isSet bool
}

func (v NullableEmailNotificationClick) Get() *EmailNotificationClick {
	return v.value
}

func (v *NullableEmailNotificationClick) Set(val *EmailNotificationClick) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailNotificationClick) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailNotificationClick) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailNotificationClick(val *EmailNotificationClick) *NullableEmailNotificationClick {
	return &NullableEmailNotificationClick{value: val, isSet: true}
}

func (v NullableEmailNotificationClick) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailNotificationClick) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


