/*
airEml - API

airEml - API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package AirEml

import (
	"encoding/json"
	"time"
)

// checks if the SmsNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsNotification{}

// SmsNotification struct for SmsNotification
type SmsNotification struct {
	// The unique identifier of the Notification.
	Id *string `json:"id,omitempty"`
	// The locale of the Notification.
	Locale *string `json:"locale,omitempty"`
	// The price of the SMS.
	Price *string `json:"price,omitempty"`
	// The ID of sender.
	SenderId *string `json:"sender_id,omitempty"`
	// The ID of recipient.
	RecipientId *string `json:"recipient_id,omitempty"`
	// The unique identifier of the SMS.
	MessageSid *string `json:"message_sid,omitempty"`
	// The phone number to send the SMS to.
	ToNumber *string `json:"to_number,omitempty"`
	// The state of the Notification status.  - 1: Notification Accepted  - 2: Notification Blocked  - 3: Notification Sent  - 4: Notification Not Sent  - 5: Notification Delivered  - 6: Notification Not Delivered
	Status *int32 `json:"status,omitempty"`
	// The custom parameters of the notification.
	CustomParams map[string]interface{} `json:"custom_params,omitempty"`
	// The datetime when the Notification was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSmsNotification instantiates a new SmsNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsNotification() *SmsNotification {
	this := SmsNotification{}
	return &this
}

// NewSmsNotificationWithDefaults instantiates a new SmsNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsNotificationWithDefaults() *SmsNotification {
	this := SmsNotification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmsNotification) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmsNotification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SmsNotification) SetId(v string) {
	o.Id = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *SmsNotification) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *SmsNotification) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *SmsNotification) SetLocale(v string) {
	o.Locale = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SmsNotification) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SmsNotification) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *SmsNotification) SetPrice(v string) {
	o.Price = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *SmsNotification) GetSenderId() string {
	if o == nil || IsNil(o.SenderId) {
		var ret string
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetSenderIdOk() (*string, bool) {
	if o == nil || IsNil(o.SenderId) {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *SmsNotification) HasSenderId() bool {
	if o != nil && !IsNil(o.SenderId) {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given string and assigns it to the SenderId field.
func (o *SmsNotification) SetSenderId(v string) {
	o.SenderId = &v
}

// GetRecipientId returns the RecipientId field value if set, zero value otherwise.
func (o *SmsNotification) GetRecipientId() string {
	if o == nil || IsNil(o.RecipientId) {
		var ret string
		return ret
	}
	return *o.RecipientId
}

// GetRecipientIdOk returns a tuple with the RecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetRecipientIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientId) {
		return nil, false
	}
	return o.RecipientId, true
}

// HasRecipientId returns a boolean if a field has been set.
func (o *SmsNotification) HasRecipientId() bool {
	if o != nil && !IsNil(o.RecipientId) {
		return true
	}

	return false
}

// SetRecipientId gets a reference to the given string and assigns it to the RecipientId field.
func (o *SmsNotification) SetRecipientId(v string) {
	o.RecipientId = &v
}

// GetMessageSid returns the MessageSid field value if set, zero value otherwise.
func (o *SmsNotification) GetMessageSid() string {
	if o == nil || IsNil(o.MessageSid) {
		var ret string
		return ret
	}
	return *o.MessageSid
}

// GetMessageSidOk returns a tuple with the MessageSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetMessageSidOk() (*string, bool) {
	if o == nil || IsNil(o.MessageSid) {
		return nil, false
	}
	return o.MessageSid, true
}

// HasMessageSid returns a boolean if a field has been set.
func (o *SmsNotification) HasMessageSid() bool {
	if o != nil && !IsNil(o.MessageSid) {
		return true
	}

	return false
}

// SetMessageSid gets a reference to the given string and assigns it to the MessageSid field.
func (o *SmsNotification) SetMessageSid(v string) {
	o.MessageSid = &v
}

// GetToNumber returns the ToNumber field value if set, zero value otherwise.
func (o *SmsNotification) GetToNumber() string {
	if o == nil || IsNil(o.ToNumber) {
		var ret string
		return ret
	}
	return *o.ToNumber
}

// GetToNumberOk returns a tuple with the ToNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetToNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ToNumber) {
		return nil, false
	}
	return o.ToNumber, true
}

// HasToNumber returns a boolean if a field has been set.
func (o *SmsNotification) HasToNumber() bool {
	if o != nil && !IsNil(o.ToNumber) {
		return true
	}

	return false
}

// SetToNumber gets a reference to the given string and assigns it to the ToNumber field.
func (o *SmsNotification) SetToNumber(v string) {
	o.ToNumber = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SmsNotification) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SmsNotification) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *SmsNotification) SetStatus(v int32) {
	o.Status = &v
}

// GetCustomParams returns the CustomParams field value if set, zero value otherwise.
func (o *SmsNotification) GetCustomParams() map[string]interface{} {
	if o == nil || IsNil(o.CustomParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomParams
}

// GetCustomParamsOk returns a tuple with the CustomParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetCustomParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomParams) {
		return map[string]interface{}{}, false
	}
	return o.CustomParams, true
}

// HasCustomParams returns a boolean if a field has been set.
func (o *SmsNotification) HasCustomParams() bool {
	if o != nil && !IsNil(o.CustomParams) {
		return true
	}

	return false
}

// SetCustomParams gets a reference to the given map[string]interface{} and assigns it to the CustomParams field.
func (o *SmsNotification) SetCustomParams(v map[string]interface{}) {
	o.CustomParams = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SmsNotification) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsNotification) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SmsNotification) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SmsNotification) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SmsNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.SenderId) {
		toSerialize["sender_id"] = o.SenderId
	}
	if !IsNil(o.RecipientId) {
		toSerialize["recipient_id"] = o.RecipientId
	}
	if !IsNil(o.MessageSid) {
		toSerialize["message_sid"] = o.MessageSid
	}
	if !IsNil(o.ToNumber) {
		toSerialize["to_number"] = o.ToNumber
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CustomParams) {
		toSerialize["custom_params"] = o.CustomParams
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSmsNotification struct {
	value *SmsNotification
	isSet bool
}

func (v NullableSmsNotification) Get() *SmsNotification {
	return v.value
}

func (v *NullableSmsNotification) Set(val *SmsNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsNotification(val *SmsNotification) *NullableSmsNotification {
	return &NullableSmsNotification{value: val, isSet: true}
}

func (v NullableSmsNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


